"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[4554],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),h=s(n),u=a,m=h["".concat(c,".").concat(u)]||h[u]||d[u]||i;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=h;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},68615:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return c},metadata:function(){return s},assets:function(){return p},toc:function(){return d},default:function(){return u}});var o=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],r={title:"dApp-Wallet Integration with WalletConnect",description:"This article covers implementation of WalletConnect, an open source protocol for communication between dApps and wallets. With it, a user can securely sign dApp proposed transactions directly from their personal wallet without exposing their private key to the application.",author:"Gil Lopes Bueno",tags:["DAPP","WALLETCONNECT"],image:"./assets/cover.png",skill:"beginner",sidebar:!0},c="dApp-Wallet Integration with WalletConnect",s={permalink:"/website/tutorials/2021/06/26/dapp-wallet-integration-with-walletconnect",source:"@site/tutorials/2021-06-26-dapp-wallet-integration-with-walletconnect/index.md",title:"dApp-Wallet Integration with WalletConnect",description:"This article covers implementation of WalletConnect, an open source protocol for communication between dApps and wallets. With it, a user can securely sign dApp proposed transactions directly from their personal wallet without exposing their private key to the application.",date:"2021-06-26T00:00:00.000Z",formattedDate:"June 26, 2021",tags:[{label:"DAPP",permalink:"/website/tutorials/tags/dapp"},{label:"WALLETCONNECT",permalink:"/website/tutorials/tags/walletconnect"}],readingTime:6.145,truncated:!1,authors:[{name:"Gil Lopes Bueno"}],prevItem:{title:"NeoID, NeoOracle and NeoFS demo",permalink:"/website/tutorials/2021/12/07/demo-of-n3-core-components"},nextItem:{title:"Getting Started with the Neo Blockchain Toolkit",permalink:"/website/tutorials/2021/05/27/getting-started-with-the-neo-blockchain-toolkit"}},p={image:n(8895).Z,authorsImageUrls:[void 0]},d=[{value:"1. An Introduction:",id:"1-an-introduction",children:[{value:"Why do I need WalletConnect in my dApp?",id:"why-do-i-need-walletconnect-in-my-dapp",children:[]},{value:"The <strong>WalletConnect 2.0</strong> protocol:",id:"the-walletconnect-20-protocol",children:[]},{value:"The <strong>WalletConnect SDK</strong>:",id:"the-walletconnect-sdk",children:[]},{value:"And this is how it works:",id:"and-this-is-how-it-works",children:[]}]},{value:"2. Using WalletConnect",id:"2-using-walletconnect",children:[{value:"Requirements",id:"requirements",children:[]},{value:"Choose your path",id:"choose-your-path",children:[]}]},{value:"2.a. The &quot;Core&quot; SDK",id:"2a-the-core-sdk",children:[{value:"Installation",id:"installation",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Manage Session",id:"manage-session",children:[]}]},{value:"2.b The &quot;React&quot; SDK",id:"2b-the-react-sdk",children:[{value:"Installation",id:"installation-1",children:[]},{value:"Setup",id:"setup-1",children:[]}]},{value:"Usage",id:"usage",children:[]},{value:"3. Using the SDK",id:"3-using-the-sdk",children:[{value:"Check if the user is connected",id:"check-if-the-user-is-connected",children:[]},{value:"Connect to the wallet",id:"connect-to-the-wallet",children:[]},{value:"Disconnect from the wallet",id:"disconnect-from-the-wallet",children:[]},{value:"Interacting with the Wallet using the methods",id:"interacting-with-the-wallet-using-the-methods",children:[]}]},{value:"4. Support",id:"4-support",children:[]}],h={toc:d};function u(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"1-an-introduction"},"1. An Introduction:"),(0,i.kt)("p",null,"This article covers implementation of ",(0,i.kt)("strong",{parentName:"p"},"WalletConnect"),", an open source protocol for communication between dApps and\nwallets. With it, a user can securely sign dApp proposed transactions directly from their personal wallet without\nexposing their private key to the application."),(0,i.kt)("h3",{id:"why-do-i-need-walletconnect-in-my-dapp"},"Why do I need WalletConnect in my dApp?"),(0,i.kt)("p",null,"Almost every decentralized application needs user's authentication to send a signed transaction to the blockchain. From\nminting tokens to making a simple transfer, users must always sign their transactions whenever the client-side\napplication needs to call a SmartContract method that requires the user's Account."),(0,i.kt)("p",null,"Without a solution like WalletConnect, the user would need to trust their private key to the dApp in order to sign.\nFor obvious reasons, outside of testing environments, this is a huge security issue. The dApp could simply use the key\nto maliciously steal funds or sign something not approved by the user."),(0,i.kt)("h3",{id:"the-walletconnect-20-protocol"},"The ",(0,i.kt)("strong",{parentName:"h3"},"WalletConnect 2.0")," protocol:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://walletconnect.org/"},"WalletConnect")," is an established chain-agnostic open source protocol for connecting\ndecentralized applications to wallets. Whereas there are different options on how to safely implement such connection,\nWalletConnect is a widely supported standard across different wallets, chains and applications, and it's technical\napproach is simple, safe and proven."),(0,i.kt)("h3",{id:"the-walletconnect-sdk"},"The ",(0,i.kt)("strong",{parentName:"h3"},"WalletConnect SDK"),":"),(0,i.kt)("p",null,"This article will present the usage of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CityOfZion/wallet-connect-sdk"},(0,i.kt)("inlineCode",{parentName:"a"},"COZ's WalletConnect 2.0 SDK")),",\nan auxiliary library built on top of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/WalletConnect/walletconnect-monorepo"},"WalletConnect")," which\nwraps the protocol for integration within the Neo ecosystem."),(0,i.kt)("h3",{id:"and-this-is-how-it-works"},"And this is how it works:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:n(13261).Z})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The application generates a connection payload and presents it to the user (commonly as a QR code) to provide to\ntheir wallet. The QR code contains information required to create a secure communication channel between the requesting\napplication and wallet via a relay server.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now, the application will have the ability to send requests directly to the user's wallet.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"When a request is received, the wallet will ask for the user to approve the transaction. It will then sign the\ntransaction, send it to the network and respond back to the dApp with the response it gets from the blockchain."))),(0,i.kt)("h2",{id:"2-using-walletconnect"},"2. Using WalletConnect"),(0,i.kt)("h3",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A front-end application that needs to interact with smart contracts deployed to the blockchain;"),(0,i.kt)("li",{parentName:"ul"},"A wallet supporting N3 with WalletConnect integration. For testing purposes, we recommend the use of\n",(0,i.kt)("a",{parentName:"li",href:"https://neon.coz.io/"},"Neon Wallet"),"."),(0,i.kt)("li",{parentName:"ul"},"Create an account on ",(0,i.kt)("a",{parentName:"li",href:"https://walletconnect.com/"},"Wallet Connect website"),"\nand then create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"Project"),", it's super easy, with just a few fields on the form. After that, you will be able to\nget your ",(0,i.kt)("inlineCode",{parentName:"li"},"projectId")," and use it on your application.")),(0,i.kt)("h3",{id:"choose-your-path"},"Choose your path"),(0,i.kt)("p",null,"There are currently two packages available for\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CityOfZion/wallet-connect-sdk"},"COZ's WalletConnect 2.0 SDK"),": the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core"},"Core SDK"),", that can be\nused with any front end framework, and a\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-react"},"React SDK"),", a React\nlibrary with a context provider that handles the state changes for us."),(0,i.kt)("p",null,"From here on, you will need to choose a path. Each upcoming section will briefly showcase the implementation of\nWalletConnect basic features using each of the packages."),(0,i.kt)("h2",{id:"2a-the-core-sdk"},'2.a. The "Core" SDK'),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Install the dependency on your client-side application"),(0,i.kt)("h4",{id:"npm"},"NPM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm i @cityofzion/wallet-connect-sdk-core @walletconnect/sign-client @walletconnect/types\n")),(0,i.kt)("h4",{id:"yarn"},"YARN"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn add @cityofzion/wallet-connect-sdk-core @walletconnect/sign-client @walletconnect/types\n")),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Initialize the SDK with the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import WcSdk from '@cityofzion/wallet-connect-sdk-core'\nimport SignClient from '@walletconnect/sign-client'\n\nconst wcSdk = new WcSdk(await SignClient.init({\n  projectId: '<your wc project id>', // the ID of your project on Wallet Connect website\n  relayUrl: 'wss://relay.walletconnect.com', // we are using walletconnect's official relay server\n  metadata: {\n    name: 'MyApplicationName', // your application name to be displayed on the wallet\n    description: 'My Application description', // description to be shown on the wallet\n    url: 'https://myapplicationdescription.app/', // url to be linked on the wallet\n    icons: ['https://myapplicationdescription.app/myappicon.png'] // icon to be shown on the wallet\n  }\n}))\n")),(0,i.kt)("p",null,"You only need to initialize the SDK once, so it's recommended to do it on your application's entry point."),(0,i.kt)("h3",{id:"manage-session"},"Manage Session"),(0,i.kt)("p",null,"Just after initializing the client you can call ",(0,i.kt)("inlineCode",{parentName:"p"},"manageSession"),", just once, it will reload the user's connected session\nand subscribe to the ",(0,i.kt)("inlineCode",{parentName:"p"},"disconnect")," event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"await wcSdk.manageSession()\n")),(0,i.kt)("p",null,"To continue the tutorial, jump to ",(0,i.kt)("a",{parentName:"p",href:"#3-Using-the-SDK"},"Using the SDK"),"."),(0,i.kt)("h2",{id:"2b-the-react-sdk"},'2.b The "React" SDK'),(0,i.kt)("h3",{id:"installation-1"},"Installation"),(0,i.kt)("p",null,"Install the dependencies on your application"),(0,i.kt)("h4",{id:"npm-1"},"NPM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm i @cityofzion/wallet-connect-sdk-react @walletconnect/sign-client @walletconnect/types\n")),(0,i.kt)("h4",{id:"yarn-1"},"YARN"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn add @cityofzion/wallet-connect-sdk-react @walletconnect/sign-client @walletconnect/types\n")),(0,i.kt)("h3",{id:"setup-1"},"Setup"),(0,i.kt)("p",null,"Wrap WalletConnectProvider around your App and declare the options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import {WalletConnectProvider} from \"@cityofzion/wallet-connect-sdk-react\";\n\nconst wcOptions = {\n    projectId: '<your wc project id>', // the ID of your project on Wallet Connect website\n    relayUrl: 'wss://relay.walletconnect.com', // we are using walletconnect's official relay server\n    metadata: {\n        name: 'MyApplicationName', // your application name to be displayed on the wallet\n        description: 'My Application description', // description to be shown on the wallet\n        url: 'https://myapplicationdescription.app/', // url to be linked on the wallet\n        icons: ['https://myapplicationdescription.app/myappicon.png'] // icon to be shown on the wallet\n    }\n};\n\nReactDOM.render(\n  <>\n    <WalletConnectProvider autoManageSession={true} options={wcOptions}>\n      <App />\n    </WalletConnectProvider>\n  </>,\n  document.getElementById(\"root\"),\n);\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"From now on, every time you need to use WalletConnect, you can simply use the ",(0,i.kt)("inlineCode",{parentName:"p"},"useWalletConnect")," hook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import {useWalletConnect} from "@cityofzion/wallet-connect-sdk-react";\n\nexport default function MyComponent() {\n  const wcSdk = useWalletConnect()\n  // do something\n}\n')),(0,i.kt)("h2",{id:"3-using-the-sdk"},"3. Using the SDK"),(0,i.kt)("h3",{id:"check-if-the-user-is-connected"},"Check if the user is connected"),(0,i.kt)("p",null,"At this point, you can check if the user is connected by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"isConnected")," method at any moment. The following code\nis optional, only to show you how to check if the user is connected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"if (wcSdk.isConnected()) {\n  console.log(wcSdk.getAccountAddress()) // print the first connected account address\n  console.log(wcSdk.getChainId()) // print the first connected account chain info\n  console.log(wcSdk.session.namespaces); // print the blockchain dictionary with methods, accounts and events\n  console.log(wcSdk.session.peer.metadata); // print the wallet metadata\n}\n")),(0,i.kt)("p",null,"But since you didn't connect yet, it will return ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". So, let's connect!"),(0,i.kt)("h3",{id:"connect-to-the-wallet"},"Connect to the wallet"),(0,i.kt)("p",null,"To connect to the wallet, you need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," method."),(0,i.kt)("p",null,"First, we check if the user is already connected, if not, we call ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," method."),(0,i.kt)("p",null,"It's important to choose the blockchain you want to connect to, and the methods you want to use."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"if (!wcSdk.isConnected()) {\n  // choose between neo3:mainnet, neo3:testnet or neo3:private, and the methods you want to use\n  await wcSdk.connect('neo3:testnet', ['invokeFunction', 'testInvoke', 'signMessage','verifyMessage'])  \n  // and check if there is a connection\n  console.log(wcSdk.isConnected() ? 'Connected successfully' : 'Connection refused')\n}\n")),(0,i.kt)("p",null,"The connect method will open a new browser tab to help the user to connect with its wallet. But you can handle the\nconnection in your own way, check the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#connect-to-the-wallet"},"documentation"),"\nto see how to do it."),(0,i.kt)("h3",{id:"disconnect-from-the-wallet"},"Disconnect from the wallet"),(0,i.kt)("p",null,"It's interesting to have a button to allow the user to disconnect its wallet, call ",(0,i.kt)("inlineCode",{parentName:"p"},"disconnect")," when this happens:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"await wcSdk.disconnect();\n")),(0,i.kt)("h3",{id:"interacting-with-the-wallet-using-the-methods"},"Interacting with the Wallet using the methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#invoking-a-smartcontract-method-on-neo-3-blockchain"},"InvokeFunction"),"\nto invoke a smart contract method on Neo 3 blockchain."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#calling-testinvoke"},"TestInvoke"),"\nto call testInvoke to retrieve information from a SmartContract without persisting any information on the blockchain."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#sign-and-verify-message"},"SignMessage and VerifyMessage"),"\nto sign and verify messages and to be sure about the user's identity."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#sign-and-verify-message"},"TraverseIterator"),"\nto traverse an iterator returned by a SmartContract method."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#get-wallet-info"},"GetWalletInfo"),"\nto get more information about the wallet."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#get-network-version"},"GetNetworkVersion"),"\nto get the network version used by the connected wallet.")),(0,i.kt)("h2",{id:"4-support"},"4. Support"),(0,i.kt)("p",null,"If you have any trouble using the SDK, please ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CityOfZion/wallet-connect-sdk/issues"},"open an issue"),"\nor contact COZ at Neo's Discord Server."))}u.isMDXComponent=!0},8895:function(e,t,n){t.Z=n.p+"assets/images/cover-f85e6c251603570ecd47e0f9f2f23534.png"},13261:function(e,t,n){t.Z=n.p+"assets/images/walletconnect-diagram-b0d1f26d5d0d867e65a5f5d1e51c6729.png"}}]);