"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[7374],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return u}});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function c(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=r.createContext({}),l=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,o=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),d=l(a),u=n,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||o;return a?r.createElement(m,i(i({ref:e},p),{},{components:a})):r.createElement(m,i({ref:e},p))}));function u(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=a.length,i=new Array(o);i[0]=d;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c.mdxType="string"==typeof t?t:n,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},18644:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=a(87462),n=a(63366),o=(a(67294),a(3905)),i=["components"],c={sidebar_label:"Glossary"},s="Glossary",l={unversionedId:"n3/glossary",id:"n3/glossary",isDocsHomePage:!1,title:"Glossary",description:"Block",source:"@site/docs/n3/glossary.md",sourceDirName:"n3",slug:"/n3/glossary",permalink:"/website/docs/n3/glossary",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/glossary.md",tags:[],version:"current",lastUpdatedBy:"Apisit Toompkadee",frontMatter:{sidebar_label:"Glossary"},sidebar:"docs",previous:{title:"Fees",permalink:"/website/docs/n3/fees"}},p=[],h={toc:p};function d(t){var e=t.components,a=(0,n.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"glossary"},"Glossary"),(0,o.kt)("h4",{id:"block"},"Block"),(0,o.kt)("p",null,"A block in a Blockchain contains a number of transaction records.  Blocks are paired up with the previous block according to the timestamp and the cryptographic hash of the previous block contained in each block header, thereby creating a chain of blocks, or a blockchain."),(0,o.kt)("h4",{id:"wallet"},"Wallet"),(0,o.kt)("p",null,"A wallet is a cryptographic public/private key pair which is used to sign and authenticate database transactions that occur on the Neo network."),(0,o.kt)("h4",{id:"account-address"},"Account (Address)"),(0,o.kt)("p",null,"Similar to your bank account, a blockchain account is used to transfer or receive assets in a transaction. The address is generated by the script hash through some operations, and can be converted back to the script hash. In Neo Legacy, the address starts with A, and in Neo N3, the address starts with N."),(0,o.kt)("h4",{id:"private-keypublic-key"},"Private Key/Public Key"),(0,o.kt)("p",null,"The private key is a 256-bit random number that is kept by users themselves, without disclosing to others. It is a proof of the user's right to use the account and ownership of assets in the account. Each private key has a public key paired with it."),(0,o.kt)("h4",{id:"transaction"},"Transaction"),(0,o.kt)("p",null,"A Neo transaction is a signed data package with an instruction for the network, for example a user indicating that he wants to transfer assets to another address. Each Neo block in the blockchain ledger contains one or more transactions, making each block a transaction batch. "),(0,o.kt)("h4",{id:"script"},"Script"),(0,o.kt)("p",null,"A script is a piece of code that consists of opcodes and operands. Each account is a contract with a script. A standard account script is composed of the public key and the OpCode that verifies the signature. The format is as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"PUSHDATA1 03ac765294075da6f7927c96bfe3d3f64ae3680c5eb50f82f55170a9f1bea59dad\nSYSCALL Neo.Crypto.VerifyWithECDsaSecp256r1\n")),(0,o.kt)("h4",{id:"script-hash"},"Script Hash"),(0,o.kt)("p",null,"The script hash is generated from the smart contract script with the RIPEMD-160 algorithm. Each script has a unique script hash. Any change made in the script of the contract will cause the script hash to change. The script hash length is 20 bytes (160 bits). The script hash is generated unidirectionally by the script, and cannot be reversed to the script. The script hash and address can be converted to each other."),(0,o.kt)("h4",{id:"opcode"},"Opcode"),(0,o.kt)("p",null,"Opcodes are similar to instructions in assembly language. For all OpCode, refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neo-project/neo-vm/blob/master/src/neo-vm/OpCode.cs"},"OpCode source"),"."),(0,o.kt)("h4",{id:"cryptographic-private-key"},"Cryptographic private key"),(0,o.kt)("p",null,"Cryptographic private key refers to the encryption of the private key through the wallet password, which is more secure than the plaintext private key. In this way, you can write the cryptographic private key on paper and keep the password in your mind."),(0,o.kt)("h4",{id:"smart-contract"},"Smart Contract"),(0,o.kt)("p",null,"From the blockchain perspective, a smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises."),(0,o.kt)("h4",{id:"nep-17"},"NEP-17"),(0,o.kt)("p",null,"The NEP-17 proposal outlines a token standard for the Neo blockchain that will provide systems with a generalized interaction mechanism for tokenized smart contracts."),(0,o.kt)("h4",{id:"syscall"},"SysCall"),(0,o.kt)("p",null,"The system call is a special operation code, through which you can call the interoperable service layer interface. By calling the interoperable service layer interface, NeoVM can access data such as block, transaction , contract, and asset information that are required for running smart contracts. For more information refer to the files in  ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neo-project/neo/tree/master/src/neo/SmartContract"},"Neo smart contract module")," starting with  ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplicationEngine.")," , such as  ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplicationEngine.Contract.cs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplicationEngine.Blockchain.cs"),"."),(0,o.kt)("h4",{id:"dynamic-call"},"Dynamic Call"),(0,o.kt)("p",null,"A special system call that invokes another contract within a contract. It can be wrote as ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract.Call(scriptHash, method, params)"),". For more information refer to ",(0,o.kt)("a",{parentName:"p",href:"develop/deploy/invoke"},"Invoking Smart Contracts"),"."),(0,o.kt)("h4",{id:"storage"},"Storage"),(0,o.kt)("p",null,"Each smart contract deployed on the Neo blockchain has a private storage area for storing application data. When creating a smart contract or transaction to use this contract, the contract code needs to read and write its storage. Each contract can declare a storage area. For more information refer to ",(0,o.kt)("a",{parentName:"p",href:"../reference/scapi/framework/services/storage"},"Storage"),"."),(0,o.kt)("h4",{id:"nef"},"NEF"),(0,o.kt)("p",null,"NEF is short for Neo Executable Format. The smart contract compiler compiles the source code and eventually generate NEF files and Manifest files (see below)."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Magic"),(0,o.kt)("th",{parentName:"tr",align:null},"4 bytes"),(0,o.kt)("th",{parentName:"tr",align:null},"Magic header"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Field"),(0,o.kt)("td",{parentName:"tr",align:null},"Length"),(0,o.kt)("td",{parentName:"tr",align:null},"Comment")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Compiler"),(0,o.kt)("td",{parentName:"tr",align:null},"32 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"Compiler used")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Version"),(0,o.kt)("td",{parentName:"tr",align:null},"16 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"Compiler version (Mayor, Minor, Build, Version)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ScriptHash"),(0,o.kt)("td",{parentName:"tr",align:null},"20 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"ScriptHash for the script")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Checksum"),(0,o.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"Sha256 of the header (CRC)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Script"),(0,o.kt)("td",{parentName:"tr",align:null},"Var bytes"),(0,o.kt)("td",{parentName:"tr",align:null},"Var bytes for the payload")))))}d.isMDXComponent=!0}}]);