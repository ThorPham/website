"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[8668],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2388:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),o=["components"],i={},p="NEP-11",s={unversionedId:"n3/develop/write/nep11",id:"n3/develop/write/nep11",isDocsHomePage:!1,title:"NEP-11",description:"The NEP-11 proposal outlines the standard for writing NFT (Non-fungible token) contracts. This document will explain how to write a simple NFT contract using C#.",source:"@site/docs/n3/develop/write/nep11.md",sourceDirName:"n3/develop/write",slug:"/n3/develop/write/nep11",permalink:"/website/docs/n3/develop/write/nep11",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/develop/write/nep11.md",tags:[],version:"current",lastUpdatedBy:"Apisit",frontMatter:{},sidebar:"docs",previous:{title:"NEF and Manifest Files",permalink:"/website/docs/n3/develop/write/manifest"},next:{title:"NEP-17",permalink:"/website/docs/n3/develop/write/nep17"}},d=[{value:"Defining NFT attributes",id:"defining-nft-attributes",children:[]},{value:"Distribution Method",id:"distribution-method",children:[]},{value:"Example",id:"example",children:[]},{value:"Methods and events in base class",id:"methods-and-events-in-base-class",children:[]},{value:"See also",id:"see-also",children:[]}],m={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"nep-11"},"NEP-11"),(0,l.kt)("p",null,"The NEP-11 proposal outlines the standard for writing NFT (Non-fungible token) contracts. This document will explain how to write a simple NFT contract using C#."),(0,l.kt)("h2",{id:"defining-nft-attributes"},"Defining NFT attributes"),(0,l.kt)("p",null,"A shortcut for developers to develop NFT contracts is inheriting directly from the class  ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11Token<Nep11TokenState>"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11TokenState")," is the class accommodating all the NFT attributes. In addition to the default ",(0,l.kt)("inlineCode",{parentName:"p"},"Name")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Owner")," fields, you can add customized attributes, such as images, videos, categories, URLs, attack power, defense power, etc."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Fields"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Name"),(0,l.kt)("td",{parentName:"tr",align:null},"HarryPotter #001"),(0,l.kt)("td",{parentName:"tr",align:null},"NFT name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null},"0x4578060c29f4c03f1e16c84312429d991952c94c"),(0,l.kt)("td",{parentName:"tr",align:null},"NFT owner")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Type"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Type\uff08customized\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Image"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://neo.org/images/HarryPotter.jpg"},"https://neo.org/images/HarryPotter.jpg")),(0,l.kt)("td",{parentName:"tr",align:null},"Image\uff08customized\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ATK"),(0,l.kt)("td",{parentName:"tr",align:null},"3000"),(0,l.kt)("td",{parentName:"tr",align:null},"Attack power\uff08customized\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DEF"),(0,l.kt)("td",{parentName:"tr",align:null},"3000"),(0,l.kt)("td",{parentName:"tr",align:null},"Defense power\uff08customized\uff09")))),(0,l.kt)("p",null,"An NFT asset requires a unique identifier. If your contract includes NFT assets with different names, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Name")," field in ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11TokenState")," as TokenID. If there are NFT assets with duplicate name, you need to add a new field like ID or TokenID."),(0,l.kt)("p",null,"Particularly, it is recommended that developers name the image field ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," in order for the wallet to display the NFT image properly. Wallet developers can also capture NFT images based on the NFT Image attribute.  "),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TokenState"),"  code example is as follows\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'public class MyTokenState : Nep11TokenState\n{\n    public string Image { get; set; }\n    \n    public MyTokenState(string name)\n    {\n        //TODO: Replace it with your own URL.\n        Image = "https://neo.org/images/" + name + ".jpg";\n    }\n}\n')),(0,l.kt)("p",null,"After inheriting ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11Token<Nep11TokenState>")," you need to rewrite the Symbol method, as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'public override string Symbol() => "MNFT";\n')),(0,l.kt)("h2",{id:"distribution-method"},"Distribution Method"),(0,l.kt)("p",null,"The base class ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11Token")," doesn't include the method for NFT distribution. Developers can write it on demand. In this example we create a method ",(0,l.kt)("inlineCode",{parentName:"p"},"Airdrop"),", which functions airdrop of NFT to the specified address, to enable the contract owner to issue NFT assets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'public static bool Airdrop(UInt160 to, string name)\n{\n    if (!IsOwner()) throw new Exception("No authorization.");\n    if (!to.IsValid) throw new Exception("Amount is invalid.");\n\n    Mint(name, new MyTokenState(name));\n    return true;\n}\n')),(0,l.kt)("p",null,"In the above code segment, the ",(0,l.kt)("inlineCode",{parentName:"p"},"Mint")," method is inherited from ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11Token"),". To invoke it, you just need to pass in TokenID and the ",(0,l.kt)("inlineCode",{parentName:"p"},"TokenState")," object of NFT."),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"The complete code is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'using Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Attributes;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n\nnamespace Contract1\n{\n    [SupportedStandards("NEP-11")]\n    public class Contract1 : Nep11Token<MyTokenState>\n    {\n        //TODO: Replace it with your own address.\n        [InitialValue("NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB", ContractParameterType.Hash160)]\n        static readonly UInt160 Owner = default;\n\n        private static bool IsOwner() => Runtime.CheckWitness(Owner);\n\n        public override string Symbol() => "MNFT";\n\n        public static bool Airdrop(UInt160 to, string name)\n        {\n            if (!IsOwner()) throw new Exception("No authorization.");\n            if (!to.IsValid) throw new Exception("Amount is invalid.");\n\n            Mint(name, new MyTokenState(name));\n            return true;\n        }\n    }\n\n    public class MyTokenState : Nep11TokenState\n    {\n        public string Image { get; set; }\n\n        public MyTokenState(string name)\n        {\n            //TODO: Replace it with your own URL.\n            Image = "https://neo.org/images/" + name + ".jpg";\n        }\n    }\n}\n\n')),(0,l.kt)("p",null,"To enable the user to purchase NFT with GAS, you can add the following method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'public static void OnNEP17Payment(UInt160 from, BigInteger amount, object _)\n{\n    \n    if (Runtime.CallingScriptHash != GAS.Hash)\n        throw new Exception("Please pay with GAS");\n    amount /= 100000000;\n    for (int i = 0; i < amount; i++)\n    {\n        //TODO: Please replace with your own naming logic. TokenId is not allowed to be the same\n        var name = "HarryPotter #001";\n        Mint(name, new MyTokenState(name));\n    }\n}\n')),(0,l.kt)("p",null,"By now we have completed a simple NFT contract."),(0,l.kt)("h2",{id:"methods-and-events-in-base-class"},"Methods and events in base class"),(0,l.kt)("p",null,"The base class ",(0,l.kt)("inlineCode",{parentName:"p"},"Nep11Token")," also provides the following methods and events:"),(0,l.kt)("h4",{id:"nep-11-methods"},"NEP-11 methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"symbol"),(0,l.kt)("td",{parentName:"tr",align:null},"--"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Returns the contract symbol, e.g. "MNFT"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"decimals"),(0,l.kt)("td",{parentName:"tr",align:null},"--"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the integer 0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"totalSupply"),(0,l.kt)("td",{parentName:"tr",align:null},"--"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"NFT total supply. Total supply= Amount of minted tokens - Amount of burned tokens")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"balanceOf"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash160\uff08owner\uff09"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"The total amount of NFT owned by the user")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ownerOf"),(0,l.kt)("td",{parentName:"tr",align:null},"ByteArray\uff08tokenId\uff09"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash160"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the owner of the specified NFT.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"properties"),(0,l.kt)("td",{parentName:"tr",align:null},"ByteArray\uff08tokenId\uff09"),(0,l.kt)("td",{parentName:"tr",align:null},"Map"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the properties of the given NFT.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokens"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"InteropInterface"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns all of the tokens minted by the contract.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokensOf"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash160\uff08owner\uff09"),(0,l.kt)("td",{parentName:"tr",align:null},"InteropInterface"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns all of the token ids owned by the specified address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transfer"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash160\uff08to\uff09 ByteArray\uff08tokenId\uff09 Any\uff08data\uff09"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"It transfers an amount of NFT with  TokenId. This method requires the signature of NFT owner.")))),(0,l.kt)("h4",{id:"events"},"Events"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transfer"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash160\uff08from\uff09 Hash160\uff08to\uff09 Integer\uff08amount\uff09 ByteArray\uff08tokenId\uff09"),(0,l.kt)("td",{parentName:"tr",align:null},"Transfer  event"),(0,l.kt)("td",{parentName:"tr",align:null},"When the ",(0,l.kt)("inlineCode",{parentName:"td"},"from")," address is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," tokens are created; When the ",(0,l.kt)("inlineCode",{parentName:"td"},"to")," address set to ",(0,l.kt)("inlineCode",{parentName:"td"},"null"),"tokens are burned.")))),(0,l.kt)("h2",{id:"see-also"},"See also"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"},"NEP-11 Proposal")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11TokenState.cs"},"Nep11TokenState Source Code")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11Token.cs"},"Nep11Token Source Code")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/chenzhitong/neoverse-readme"},"NeoVerse Document")))}u.isMDXComponent=!0}}]);