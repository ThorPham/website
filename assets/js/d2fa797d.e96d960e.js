"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[6539],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(k,o(o({ref:t},p),{},{components:r})):n.createElement(k,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},71983:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],l={},s="StdLib Class",c={unversionedId:"n3/reference/scapi/framework/native/StdLib",id:"n3/reference/scapi/framework/native/StdLib",isDocsHomePage:!1,title:"StdLib Class",description:"Provides a series methods of the native contract StdLib, which contract hash is 0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0.",source:"@site/docs/n3/reference/scapi/framework/native/StdLib.md",sourceDirName:"n3/reference/scapi/framework/native",slug:"/n3/reference/scapi/framework/native/StdLib",permalink:"/website/docs/n3/reference/scapi/framework/native/StdLib",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/reference/scapi/framework/native/StdLib.md",tags:[],version:"current",lastUpdatedBy:"Apisit",frontMatter:{},sidebar:"docs",previous:{title:"RoleManagement.GetDesignatedByRole Method",permalink:"/website/docs/n3/reference/scapi/framework/native/RoleManagement/GetDesignatedByRole"},next:{title:"Block Class",permalink:"/website/docs/n3/reference/scapi/framework/services/Block"}},p=[{value:"Syntax",id:"syntax",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Methods",id:"methods",children:[]}],d={toc:p};function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stdlib-class"},"StdLib Class"),(0,i.kt)("p",null,"Provides a series methods of the native contract ",(0,i.kt)("inlineCode",{parentName:"p"},"StdLib"),", which contract hash is ",(0,i.kt)("inlineCode",{parentName:"p"},"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0"),"."),(0,i.kt)("p",null,"Namespace: ",(0,i.kt)("a",{parentName:"p",href:"/website/docs/n3/reference/scapi/framework/native"},"Neo.SmartContract.Framework.Native")),(0,i.kt)("p",null,"Assembly: Neo.SmartContract.Framework"),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public static class StdLib\n")),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Hash"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the contract hash")))),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Serialize(object source)"),(0,i.kt)("td",{parentName:"tr",align:null},"Serializes the object to byte array")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Deserialize(ByteString source)"),(0,i.kt)("td",{parentName:"tr",align:null},"Deserializes the byte array to object")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"JsonSerialize(object obj)"),(0,i.kt)("td",{parentName:"tr",align:null},"Serializes the object to Json")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"JsonDeserialize(string json)"),(0,i.kt)("td",{parentName:"tr",align:null},"Deserializes the Json to object")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Base64Decode(string input)"),(0,i.kt)("td",{parentName:"tr",align:null},"Decodes the Base64-encoded string into byte array")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Base64Encode(ByteString input)"),(0,i.kt)("td",{parentName:"tr",align:null},"Encodes the byte array into Base64 string")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Base58Decode(string input)"),(0,i.kt)("td",{parentName:"tr",align:null},"Decodes the Base58 encoded string into byte array")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Base58Encode(ByteString input)"),(0,i.kt)("td",{parentName:"tr",align:null},"Encodes the byte array into Base58 string")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Base58CheckDecode(string input)"),(0,i.kt)("td",{parentName:"tr",align:null},"Decodes the Base58Check encoded string into byte array")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Base58CheckEncode(ByteString input)"),(0,i.kt)("td",{parentName:"tr",align:null},"Encodes the byte array into Base58Check string")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Itoa"),(0,i.kt)("td",{parentName:"tr",align:null},"Converts the integer to string")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Atoi(string value, int @base = 10)"),(0,i.kt)("td",{parentName:"tr",align:null},"Converts the string to integer")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MemoryCompare(ByteString, ByteString)"),(0,i.kt)("td",{parentName:"tr",align:null},"If two arrays are the same, return 0; if array 1 is less than array 2, return a value less than 0; if array 1 is greater than array 2, return a value greater than 0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MemorySearch"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the index of the first match of array 2 in array 1, or -1 if no match")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"StringSplit"),(0,i.kt)("td",{parentName:"tr",align:null},"Creates an array of substrings by splitting the input string based on one or more delimiters")))))}u.isMDXComponent=!0}}]);