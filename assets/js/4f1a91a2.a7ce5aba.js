"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[9614],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var a=n(67294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var l=a.createContext({}),o=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,c=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=o(n),f=c,h=u["".concat(l,".").concat(f)]||u[f]||p[f]||s;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function f(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var s=n.length,i=new Array(s);i[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:c,i[1]=r;for(var o=2;o<s;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},33718:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return o},toc:function(){return d},default:function(){return u}});var a=n(87462),c=n(63366),s=(n(67294),n(3905)),i=["components"],r={},l="RPC Invocation Methods",o={unversionedId:"n3/develop/tool/sdk/rpc",id:"n3/develop/tool/sdk/rpc",isDocsHomePage:!1,title:"RPC Invocation Methods",description:"The RpcClient encapsulates all the interfaces provided by RpcServer. You can send RPC requests in your code through the standard methods provided in this module. You only need to pass in the corresponding parameters, the SDK will construct the corresponding JSON-RPC requests and then get the data returned by the node.",source:"@site/docs/n3/develop/tool/sdk/rpc.md",sourceDirName:"n3/develop/tool/sdk",slug:"/n3/develop/tool/sdk/rpc",permalink:"/website/docs/n3/develop/tool/sdk/rpc",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/develop/tool/sdk/rpc.md",tags:[],version:"current",lastUpdatedBy:"Apisit",frontMatter:{},sidebar:"docs",previous:{title:"Getting Blockchain Information",permalink:"/website/docs/n3/develop/tool/sdk/monitor"},next:{title:"Transaction Construction",permalink:"/website/docs/n3/develop/tool/sdk/transaction"}},d=[{value:"Initializing RpcClient",id:"initializing-rpcclient",children:[]},{value:"Blockchain data",id:"blockchain-data",children:[{value:"GetBestBlockHashAsync",id:"getbestblockhashasync",children:[]},{value:"GetBlockAsync",id:"getblockasync",children:[]},{value:"GetBlockCountAsync",id:"getblockcountasync",children:[]},{value:"GetBlockHashAsync",id:"getblockhashasync",children:[]},{value:"Get the block header information",id:"get-the-block-header-information",children:[]},{value:"GetContractStateAsync",id:"getcontractstateasync",children:[]},{value:"GetRawMempoolAsync",id:"getrawmempoolasync",children:[]},{value:"GetRawMempoolBothAsync",id:"getrawmempoolbothasync",children:[]},{value:"GetRawTransactionAsync",id:"getrawtransactionasync",children:[]},{value:"GetRawTransactionHexAsync",id:"getrawtransactionhexasync",children:[]},{value:"CalculateNetworkFeeAsync",id:"calculatenetworkfeeasync",children:[]},{value:"GetStorageAsync",id:"getstorageasync",children:[]},{value:"GetTransactionHeightAsync",id:"gettransactionheightasync",children:[]},{value:"GetNextBlockValidatorsAsync",id:"getnextblockvalidatorsasync",children:[]},{value:"GetCommitteeAsync",id:"getcommitteeasync",children:[]}]},{value:"Node",id:"node",children:[{value:"GetConnectionCount",id:"getconnectioncount",children:[]},{value:"GetPeersAsync",id:"getpeersasync",children:[]},{value:"GetVersionAsync",id:"getversionasync",children:[]},{value:"SendRawTransactionAsync",id:"sendrawtransactionasync",children:[]},{value:"SubmitBlockAsync",id:"submitblockasync",children:[]}]},{value:"Smart contract",id:"smart-contract",children:[{value:"InvokeFunctionAsync",id:"invokefunctionasync",children:[]},{value:"InvokeScriptAsync",id:"invokescriptasync",children:[]},{value:"GetUnclaimedGasAsync",id:"getunclaimedgasasync",children:[]}]},{value:"Tools",id:"tools",children:[{value:"ListPluginsAsync",id:"listpluginsasync",children:[]},{value:"ValidateAddressAsync",id:"validateaddressasync",children:[]}]},{value:"Wallets",id:"wallets",children:[{value:"OpenWalletAsync",id:"openwalletasync",children:[]},{value:"CloseWalletAsync",id:"closewalletasync",children:[]},{value:"DumpPrivKeyAsync",id:"dumpprivkeyasync",children:[]},{value:"GetBalanceAsync",id:"getbalanceasync",children:[]},{value:"GetNewAddressAsync",id:"getnewaddressasync",children:[]},{value:"GetUnclaimedGasAsync",id:"getunclaimedgasasync-1",children:[]},{value:"ImportPrivKeyAsync",id:"importprivkeyasync",children:[]},{value:"ListAddressAsync",id:"listaddressasync",children:[]},{value:"SendFromAsync",id:"sendfromasync",children:[]},{value:"SendManyAsync",id:"sendmanyasync",children:[]},{value:"SendToAddressAsync",id:"sendtoaddressasync",children:[]}]},{value:"Plugins",id:"plugins",children:[{value:"GetApplicationLogAsync",id:"getapplicationlogasync",children:[]},{value:"GetNep17BalancesAsync",id:"getnep17balancesasync",children:[]},{value:"GetNep17TransfersAsync",id:"getnep17transfersasync",children:[]}]}],p={toc:d};function u(e){var t=e.components,n=(0,c.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"rpc-invocation-methods"},"RPC Invocation Methods"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"RpcClient")," encapsulates all the interfaces provided by RpcServer. You can send RPC requests in your code through the standard methods provided in this module. You only need to pass in the corresponding parameters, the SDK will construct the corresponding JSON-RPC requests and then get the data returned by the node."),(0,s.kt)("h2",{id:"initializing-rpcclient"},"Initializing RpcClient"),(0,s.kt)("p",null,"Before you can send RPC requests you need to initialize  ",(0,s.kt)("inlineCode",{parentName:"p"},"RpcClient")," first. Choose the RPC server port of a Neo node according to your own needs. Here is an example:"),(0,s.kt)("p",null,"Test net node\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'// TestNet Node\nRpcClient client = new RpcClient(new Uri("http://seed1.neo.org:20332"), null, null, ProtocolSettings.Load("config.json"));\n')),(0,s.kt)("p",null,"Local node (the local Neo-CLI that can be connected to main net, test net, or private net according to configuration):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'// Local Node\nRpcClient client = new RpcClient(new Uri("http://localhost:20332"), null, null, ProtocolSettings.Load("config.json"));\n')),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"}," Typically, only one RpcClient instance needs to be initialized in an application, not needing in each method."))),(0,s.kt)("h2",{id:"blockchain-data"},"Blockchain data"),(0,s.kt)("h3",{id:"getbestblockhashasync"},"GetBestBlockHashAsync"),(0,s.kt)("p",null,"Gets the hash of the highest block in the blockchain:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"string hexString = await client.GetBestBlockHashAsync().ConfigureAwait(false);\nbyte[] hashBytes = hexString.HexToBytes();\nUInt256 hash256 = UInt256.Parse(hexString);\n")),(0,s.kt)("h3",{id:"getblockasync"},"GetBlockAsync"),(0,s.kt)("p",null,"Gets the detailed block information by the block hash or block index."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcBlock rpcBlock = await client.GetBlockAsync("773dd2dae4a9c9275290f89b56e67d7363ea4826dfd4fc13cc01cf73a44b0d0e").ConfigureAwait(false);\nBlock block = rpcBlock.Block;\n')),(0,s.kt)("p",null,"or "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcBlock rpcBlock = await client.GetBlockAsync("1024").ConfigureAwait(false);\nBlock block = rpcBlock.Block;\n')),(0,s.kt)("p",null,"You can also get the serialized block information through the block hash value or block index:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string serializedBlock = await client.GetBlockHexAsync("773dd2dae4a9c9275290f89b56e67d7363ea4826dfd4fc13cc01cf73a44b0d0e").ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getblockcountasync"},"GetBlockCountAsync"),(0,s.kt)("p",null,"Gets the current block quantity."),(0,s.kt)("p",null,"Block index\uff08Index\uff09 = Block height\uff08Height\uff09 = Block count\uff08Count\uff09 - 1"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"uint blockCount = await client.GetBlockCountAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"getblockhashasync"},"GetBlockHashAsync"),(0,s.kt)("p",null,"Gets the block hash by the block index."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"string hexString = await client.GetBlockHashAsync(10000).ConfigureAwait(false);\nbyte[] hashBytes = hexString.HexToBytes();\nUInt256 hash256 = UInt256.Parse(hexString);\n")),(0,s.kt)("h3",{id:"get-the-block-header-information"},"Get the block header information"),(0,s.kt)("p",null,"Get the specific block header information by the block hash or block index:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcBlockHeader blockHeader = await client.GetBlockHeaderAsync("a5508c9b6ed0fc09a531a62bc0b3efcb6b8a9250abaf72ab8e9591294c1f6957").ConfigureAwait(false);\nHeader header = blockHeader.Header;\n')),(0,s.kt)("p",null,"or"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcBlockHeader blockHeader = await client.GetBlockHeaderAsync("10000").ConfigureAwait(false);\nHeader header = blockHeader.Header;\n')),(0,s.kt)("p",null,"Get the serialized block header information from the block hash or block index:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string serializedBlockHeader = await client.GetBlockHeaderHexAsync("a5508c9b6ed0fc09a531a62bc0b3efcb6b8a9250abaf72ab8e9591294c1f6957").ConfigureAwait(false);\n')),(0,s.kt)("p",null,"or"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'string serializedBlockHeader = await client.GetBlockHeaderHexAsync("10000").ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getcontractstateasync"},"GetContractStateAsync"),(0,s.kt)("p",null,"Gets the contract information from the contract hash or contract ID"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'ContractState contractState = await client.GetContractStateAsync("dc675afc61a7c0f7b3d2682bf6e1d8ed865a0e5f").ConfigureAwait(false);\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"ContractState contractState = client.GetContractState(-1);\n")),(0,s.kt)("h3",{id:"getrawmempoolasync"},"GetRawMempoolAsync"),(0,s.kt)("p",null,"Gets hash list of the confirmed transactions in the memory."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"string[] verifiedTransactions = await client.GetRawMempoolAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"getrawmempoolbothasync"},"GetRawMempoolBothAsync"),(0,s.kt)("p",null,"Gets both confirmed and unconfirmed transaction hashes in memory:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"RpcRawMemPool memPool = await client.GetRawMempoolBothAsync().ConfigureAwait(false);\nstring[] verifiedTransactions = memPool.Verified;\nstring[] unverifiedTransactions = memPool.UnVerified;\n")),(0,s.kt)("h3",{id:"getrawtransactionasync"},"GetRawTransactionAsync"),(0,s.kt)("p",null,"Gets the transaction information by transaction ID."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcTransaction rpcTransaction = await client.GetRawTransactionAsync("f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657").ConfigureAwait(false);\nTransaction transaction = rpcTransaction.Transaction;\n')),(0,s.kt)("h3",{id:"getrawtransactionhexasync"},"GetRawTransactionHexAsync"),(0,s.kt)("p",null,"Gets the serialized transaction by transaction ID."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string serializedTransaction = await client.GetRawTransactionHexAsync("f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657").ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"calculatenetworkfeeasync"},"CalculateNetworkFeeAsync"),(0,s.kt)("p",null,"Calculates network fee of the specified transaction."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"long networkFee = await rpcClient.CalculateNetworkFeeAsync(transaction).ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"getstorageasync"},"GetStorageAsync"),(0,s.kt)("p",null,"Gets the stored value through the contract script hash and stored key (which needs to be converted into a hex string):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string value = await client.GetStorageAsync("03febccf81ac85e3d795bc5cbd4e84e907812aa3", "5065746572").ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"gettransactionheightasync"},"GetTransactionHeightAsync"),(0,s.kt)("p",null,"Gets the block height of the specified transaction by transaction ID:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'uint height = await client.GetTransactionHeightAsync("f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657").ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getnextblockvalidatorsasync"},"GetNextBlockValidatorsAsync"),(0,s.kt)("p",null,"Gets the consensus nodes information and voting status in the current network."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"RpcValidator[] rpcValidators = await client.GetNextBlockValidatorsAsync().ConfigureAwait(false);\nforeach (var validator in rpcValidators)\n{\n    string publicKey = validator.PublicKey;\n    BigInteger voteCount = validator.Votes;\n    bool isActive = validator.Active;\n}\n")),(0,s.kt)("h3",{id:"getcommitteeasync"},"GetCommitteeAsync"),(0,s.kt)("p",null,"Gets the public key list of the current committee members."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"string[] committees = await client.GetCommitteeAsync().ConfigureAwait(false);\n")),(0,s.kt)("h2",{id:"node"},"Node"),(0,s.kt)("h3",{id:"getconnectioncount"},"GetConnectionCount"),(0,s.kt)("p",null,"Gets the number of nodes connected to this node."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"int connectionCount = await client.GetConnectionCountAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"getpeersasync"},"GetPeersAsync"),(0,s.kt)("p",null,"Gets a list of currently connected / unconnected nodes for this node, including IP address and port."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"RpcPeers rpcPeers = await client.GetPeersAsync().ConfigureAwait(false);;\nRpcPeer[] connected = rpcPeers.Connected;\nRpcPeer[] unconnected = rpcPeers.Unconnected;\nif (connected.Length > 0)\n{\n    RpcPeer peer = connected[1];\n    string address = peer.Address;\n    int port = peer.Port;\n}\n")),(0,s.kt)("h3",{id:"getversionasync"},"GetVersionAsync"),(0,s.kt)("p",null,"Gets the version of the node receiving the RPC request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"RpcVersion rpcVersion = await client.GetVersionAsync().ConfigureAwait(false);\nstring version = rpcVersion.UserAgent;\n")),(0,s.kt)("h3",{id:"sendrawtransactionasync"},"SendRawTransactionAsync"),(0,s.kt)("p",null,"Sends and broadcasts the serialized transaction."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'UInt256 txHash = await client.SendRawTransactionAsync("80000001195876cb34364dc38b730077156c6bc3a7fc570044a66fbfeeea56f71327e8ab0000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c65eaf440000000f9a23e06f74cf86b8827a9108ec2e0f89ad956c9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50092e14b5e00000030aab52ad93f6ce17ca07fa88fc191828c58cb71014140915467ecd359684b2dc358024ca750609591aa731a0b309c7fb3cab5cd0836ad3992aa0a24da431f43b68883ea5651d548feb6bd3c8e16376e6e426f91f84c58232103322f35c7819267e721335948d385fae5be66e7ba8c748ac15467dcca0693692dac").HexToBytes()).ConfigureAwait(false);\n')),(0,s.kt)("p",null,"Or broadcasts the transaction (tx) over the blockchain:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"UInt256 txHash = await client.SendRawTransactionAsync(transaction).ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"submitblockasync"},"SubmitBlockAsync"),(0,s.kt)("p",null,"Sends and broadcasts the serialized block\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'UInt256 blockHash = await client.SubmitBlockAsync("000000000000000000000000000000000000000000000000000000000000000000000000845c34e7c1aed302b1718e914da0c42bf47c476ac4d89671f278d8ab6d27aa3d65fc8857000000001dac2b7c00000000be48d3a3f5d10013ab9ffee489706078714f1ea2010001510400001dac2b7c00000000400000455b7b226c616e67223a227a682d434e222c226e616d65223a22e5b08fe89a81e882a1227d2c7b226c616e67223a22656e222c226e616d65223a22416e745368617265227d5d0000c16ff28623000000da1745e9b549bd0bfa1a569971c77eba30cd5a4b00000000400001445b7b226c616e67223a227a682d434e222c226e616d65223a22e5b08fe89a81e5b881227d2c7b226c616e67223a22656e222c226e616d65223a22416e74436f696e227d5d0000c16ff286230008009f7fd096d37ed2c0e3f7f0cfc924beef4ffceb680000000001000000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50000c16ff2862300be48d3a3f5d10013ab9ffee489706078714f1ea201000151").HexToBytes()).ConfigureAwait(false);\n')),(0,s.kt)("h2",{id:"smart-contract"},"Smart contract"),(0,s.kt)("h3",{id:"invokefunctionasync"},"InvokeFunctionAsync"),(0,s.kt)("p",null,"Invokes the specific method of the smart contract through the specified smart contract script hash, method name, and parameters, and returns the result after running in the virtual machine."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string contractHash = "0xd2a4cff31913016155e38e474a2c06d08be276cf";\nstring method = "transfer";\nRpcStack from = new RpcStack()\n{\n    Type = "Hash160",\n    Value = "0x262678399f390ee9f0cfd9ac8c65df8c149b4e9c"\n};\nRpcStack to = new RpcStack()\n{\n    Type = "Hash160",\n    Value = "0x753b9b069ef88dea7323a0f1ba6cb24486584f05"\n};\nRpcStack amount = new RpcStack()\n{\n    Type = "Integer",\n    Value = "120000000"\n};\nRpcStack data = new RpcStack()\n{\n    Type = "String",\n    Value = "my data"\n};\n\nSigner signer0 = new Signer()\n{\n    Account = UInt160.Parse("0x262678399f390ee9f0cfd9ac8c65df8c149b4e9c")\n};\n\nRpcInvokeResult rpcInvokeResult = await _rpcClient.InvokeFunctionAsync(contractHash, method, new RpcStack[] { from, to, amount, data }, signer0).ConfigureAwait(false);\n\nstring script = rpcInvokeResult.Script;\nvar engineState = rpcInvokeResult.State;\nlong gasConsumed = rpcInvokeResult.GasConsumed;\n')),(0,s.kt)("h3",{id:"invokescriptasync"},"InvokeScriptAsync"),(0,s.kt)("p",null,"Returns the result after running the specified script in the virtual machine."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'byte[] script = "00046e616d656724058e5e1b6008847cd662728549088a9ee82191".HexToBytes();\nRpcInvokeResult rpcInvokeResult = await client.InvokeScriptAsync(script).ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getunclaimedgasasync"},"GetUnclaimedGasAsync"),(0,s.kt)("p",null,"Gets amount of unclaimed GAS at the specified address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcUnclaimedGas unclaimedGas = await client.GetUnclaimedGasAsync("NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM").ConfigureAwait(false);\nBigInteger unclaimed = unclaimedGas.Unclaimed;\nstring address = unclaimedGas.Address;\n')),(0,s.kt)("h2",{id:"tools"},"Tools"),(0,s.kt)("h3",{id:"listpluginsasync"},"ListPluginsAsync"),(0,s.kt)("p",null,"Lists all the plugins loaded in the node."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"RpcPlugin[] rpcPlugins = await client.ListPluginsAsync().ConfigureAwait(false);\nforeach (var item in rpcPlugins)\n{\n    string name = item.Name;\n    string version = item.Version;\n}\n")),(0,s.kt)("h3",{id:"validateaddressasync"},"ValidateAddressAsync"),(0,s.kt)("p",null,"Validates if the specified address is a valid Neo address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'RpcValidateAddressResult result = await client.ValidateAddressAsync("AQVh2pG732YvtNaxEGkQUei3YA4cvo7d2i").ConfigureAwait(false);\nstring address = result.Address;\nbool isValid = result.IsValid;\n')),(0,s.kt)("h2",{id:"wallets"},"Wallets"),(0,s.kt)("p",null,"The node local wallet interface contains the function of accessing the local wallet file. Before using the methods described in this section, you need to open the wallet using the openwallet method."),(0,s.kt)("p",null,"This method is disabled by default in the node configuration file for preventing high security risks."),(0,s.kt)("h3",{id:"openwalletasync"},"OpenWalletAsync"),(0,s.kt)("p",null,"Opens the wallet file in the machine running the node."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string path = "D:/temp/123.json";\nstring password = "Password***";\nbool result = await client.OpenWalletAsync(path, password).ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"closewalletasync"},"CloseWalletAsync"),(0,s.kt)("p",null,"Closes the wallet and clears the wallet information in memory."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"bool result = await client.CloseWalletAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"dumpprivkeyasync"},"DumpPrivKeyAsync"),(0,s.kt)("p",null,"Exports the private key of the specified address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string wif = await client.DumpPrivKeyAsync("NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ").ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getbalanceasync"},"GetBalanceAsync"),(0,s.kt)("p",null,"Returns balance of the specified asset in the wallet by the asset id. This method is applicable to the native contract assets and NEP-17 compliant assets."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"BigDecimal balance = await client.GetWalletBalanceAsync(NativeContract.NEO.Hash.ToString()).ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"getnewaddressasync"},"GetNewAddressAsync"),(0,s.kt)("p",null,"Creates a new account in the wallet and returns the corresponding address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"string address = await client.GetNewAddressAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"getunclaimedgasasync-1"},"GetUnclaimedGasAsync"),(0,s.kt)("p",null,"Displays amount of the unclaimed GAS in the wallet."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"BigInteger amount = await client.GetWalletUnclaimedGasAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"importprivkeyasync"},"ImportPrivKeyAsync"),(0,s.kt)("p",null,"Imports the private key into the wallet."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string wif = "KyoYyZpoccbR6KZ25eLzhMTUxREwCpJzDsnuodGTKXSG8fDW9t7x";\nRpcAccount account = await client.ImportPrivKeyAsync(wif).ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"listaddressasync"},"ListAddressAsync"),(0,s.kt)("p",null,"Lists all the addresses in the wallet."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"List<RpcAccount> acoounts = await client.ListAddressAsync().ConfigureAwait(false);\n")),(0,s.kt)("h3",{id:"sendfromasync"},"SendFromAsync"),(0,s.kt)("p",null,"Transfers asset from a specified address to another address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string assetId = NativeContract.NEO.Hash.ToString();\nstring fromAddress = "NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ";\nstring toAddress= "NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW";\nstring amount = "100";\nJObject result = await client.SendFromAsync(assetId, fromAddress, toAddress, amount).ConfigureAwait(false);\n')),(0,s.kt)("p",null,"If the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent."),(0,s.kt)("p",null,"If the signature is incomplete transaction to be signed is returned."),(0,s.kt)("p",null,"If the balance is insufficient an error is returned."),(0,s.kt)("h3",{id:"sendmanyasync"},"SendManyAsync"),(0,s.kt)("p",null,"Transfers assets to multiple addresses. You can specify the sending address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'List<RpcTransferOut> outs = new List<RpcTransferOut>();\nouts.Add(new RpcTransferOut\n{\n    Asset = NativeContract.NEO.Hash,\n    ScriptHash = Utility.GetScriptHash("NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ"),\n    Value = "100"\n});\nouts.Add(new RpcTransferOut\n{\n    Asset = NativeContract.GAS.Hash,\n    ScriptHash = Utility.GetScriptHash("NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW"),\n    Value = "100.12345678"\n});\nJObject result = await client.SendManyAsync("", outs).ConfigureAwait(false);\n')),(0,s.kt)("p",null,"If the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent."),(0,s.kt)("p",null,"If the signature is incomplete transaction to be signed is returned."),(0,s.kt)("p",null,"If the balance is insufficient an error is returned."),(0,s.kt)("h3",{id:"sendtoaddressasync"},"SendToAddressAsync"),(0,s.kt)("p",null,"Transfers asset to the specified address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string assetId = NativeContract.NEO.Hash.ToString();\nstring toAddress = "NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW";\nstring amount = "100";\nJObject result = await client.SendToAddressAsync(assetId, toAddress, amount).ConfigureAwait(false);\n')),(0,s.kt)("p",null,"If the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent."),(0,s.kt)("p",null,"If the signature is incomplete transaction to be signed is returned."),(0,s.kt)("p",null,"If the balance is insufficient an error is returned."),(0,s.kt)("h2",{id:"plugins"},"Plugins"),(0,s.kt)("h3",{id:"getapplicationlogasync"},"GetApplicationLogAsync"),(0,s.kt)("p",null,"Gets the contract log by the specific transaction ID. The plugin ApplicationLogs is required for invoking this method. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string txHash = "0x23bf33766d00b4bb3314185f1ff0c2c85182d4d5e4e96f7c2df7506e7f99098b";\nRpcApplicationLog log = await client.GetApplicationLogAsync(txHash).ConfigureAwait(false);\n')),(0,s.kt)("p",null,"Or gets the contract log based on the specified transaction ID and trigger type"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string txHash = "0x23bf33766d00b4bb3314185f1ff0c2c85182d4d5e4e96f7c2df7506e7f99098b";\nRpcApplicationLog log = await client.GetApplicationLogAsync(txHash, TriggerType.Application).ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getnep17balancesasync"},"GetNep17BalancesAsync"),(0,s.kt)("p",null,"Returns all NEP-17 assets balance at the specified address. The plugin TokensTracker is required for invoking this method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string address = "NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ";\nRpcNep17Balances balances = await client.GetNep17BalancesAsync(address).ConfigureAwait(false);\n')),(0,s.kt)("h3",{id:"getnep17transfersasync"},"GetNep17TransfersAsync"),(0,s.kt)("p",null,"Returns all NEP-17 transaction records at the specific address. The plugin TokensTracker is required for invoking this method."),(0,s.kt)("p",null,"If start and end timestamps are specified, transactions occurred in the time range is returned."),(0,s.kt)("p",null,"If no parameter is specified transactions in the past seven days are returned."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'string address = "NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ";\nRpcNep17Transfers transfers = await client.GetNep17TransfersAsync(address, 0).ConfigureAwait(false);\n')))}u.isMDXComponent=!0}}]);