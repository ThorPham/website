"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[9482],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=i(n),d=a,m=u["".concat(s,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},43867:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],c={},s="CallFlags Enumerator",i={unversionedId:"n3/reference/scapi/framework/services/CallFlags",id:"n3/reference/scapi/framework/services/CallFlags",isDocsHomePage:!1,title:"CallFlags Enumerator",description:"Defines special behaviors allowed when invoking smart contracts, such as chain calls, sending notifications, modifying states, etc.",source:"@site/docs/n3/reference/scapi/framework/services/CallFlags.md",sourceDirName:"n3/reference/scapi/framework/services",slug:"/n3/reference/scapi/framework/services/CallFlags",permalink:"/website/docs/n3/reference/scapi/framework/services/CallFlags",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/reference/scapi/framework/services/CallFlags.md",tags:[],version:"current",lastUpdatedBy:"Apisit",frontMatter:{},sidebar:"docs",previous:{title:"Block Class",permalink:"/website/docs/n3/reference/scapi/framework/services/Block"},next:{title:"Contract Class",permalink:"/website/docs/n3/reference/scapi/framework/services/Contract"}},p=[{value:"Syntax",id:"syntax",children:[{value:"Parameters description",id:"parameters-description",children:[]}]}],f={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"callflags-enumerator"},"CallFlags Enumerator"),(0,o.kt)("p",null,"Defines special behaviors allowed when invoking smart contracts, such as chain calls, sending notifications, modifying states, etc."),(0,o.kt)("p",null,"Namespace\uff1a",(0,o.kt)("a",{parentName:"p",href:"/website/docs/n3/reference/scapi/framework/services"},"Neo.SmartContract.Framework.Services")),(0,o.kt)("p",null,"Assembly: Neo.SmartContract.Framework"),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public enum CallFlags : byte\n{\n    None = 0,\n\n    AllowModifyStates = 0b00000001,\n    AllowCall = 0b00000010,\n    AllowNotify = 0b00000100,\n\n    ReadOnly = AllowCall | AllowNotify,\n    All = AllowModifyStates | AllowCall | AllowNotify\n}\n")),(0,o.kt)("h3",{id:"parameters-description"},"Parameters description"),(0,o.kt)("p",null,"None: Special behaviors of the invoked contract are not allowed, such as chain calls, sending notifications, modifying state, etc."),(0,o.kt)("p",null,"AllowModifyStates: Allows the invoked contract to modify status."),(0,o.kt)("p",null,"AllowCall: Allows the invoked contract to do chain calls."),(0,o.kt)("p",null,"AllowNotify: Allows the invoked contract to send notifications."),(0,o.kt)("p",null,"ReadOnly: Allows the invoked contract to do chain calls and send notifications."),(0,o.kt)("p",null,"All: All behaviors of the invoked contract are allowed."),(0,o.kt)("p",null,"CallFlags is used in the method ",(0,o.kt)("a",{parentName:"p",href:"/website/docs/n3/reference/scapi/framework/services/Contract/Call"},"Call(UInt160, string, CallFlags, params object[])"),"."),(0,o.kt)("p",null,"You can also get CallFlags of native contract by ",(0,o.kt)("a",{parentName:"p",href:"/website/docs/n3/reference/scapi/framework/services/Contract/GetCallFlags"},"GetCallFlags()")," ."))}u.isMDXComponent=!0}}]);