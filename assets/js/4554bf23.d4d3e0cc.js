"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[5558],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),s=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},u=function(t){var e=s(t.components);return n.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(f,o(o({ref:e},u),{},{components:r})):n.createElement(f,o({ref:e},u))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,o=new Array(i);o[0]=m;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,o[1]=c;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4990:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],c={},l="Runtime Class",s={unversionedId:"n3/reference/scapi/framework/services/Runtime",id:"n3/reference/scapi/framework/services/Runtime",isDocsHomePage:!1,title:"Runtime Class",description:"Provides a set of methods during smart contract execution.",source:"@site/docs/n3/reference/scapi/framework/services/Runtime.md",sourceDirName:"n3/reference/scapi/framework/services",slug:"/n3/reference/scapi/framework/services/Runtime",permalink:"/website/docs/n3/reference/scapi/framework/services/Runtime",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/reference/scapi/framework/services/Runtime.md",tags:[],version:"current",lastUpdatedBy:"Apisit",frontMatter:{},sidebar:"docs",previous:{title:"Notification Class",permalink:"/website/docs/n3/reference/scapi/framework/services/Notification"},next:{title:"Runtime.CheckWitness Method",permalink:"/website/docs/n3/reference/scapi/framework/services/Runtime/CheckWitness"}},u=[{value:"Syntax",id:"syntax",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Method",id:"method",children:[]},{value:"Constructor",id:"constructor",children:[]}],p={toc:u};function m(t){var e=t.components,r=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"runtime-class"},"Runtime Class"),(0,i.kt)("p",null,"Provides a set of methods during smart contract execution."),(0,i.kt)("p",null,"Namespace\uff1a",(0,i.kt)("a",{parentName:"p",href:"/website/docs/n3/reference/scapi/framework/services"},"Neo.SmartContract.Framework.Services")),(0,i.kt)("p",null,"Assembly\uff1aNeo.SmartContract.Framework"),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public static class Runtime\n")),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/website/docs/n3/reference/scapi/framework/services/Runtime/Trigger"},"Trigger")),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the trigger type for the smart contract (verification contract or application contract).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Platform"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets information of the platform on which the smart contract is currently executed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ScriptContainer"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the current script container")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ExecutingScriptHash"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the script hash of the current context")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CallingScriptHash"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the script hash of the calling contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EntryScriptHash"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the script hash of the entry context")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Time"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the timestamp of the current block")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"InvocationCounter"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the call number of the current contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"GasLeft"),(0,i.kt)("td",{parentName:"tr",align:null},"Gets the left GAS of the fee of current transaction")))),(0,i.kt)("h2",{id:"method"},"Method"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/website/docs/n3/reference/scapi/framework/services/Runtime/GetNotifications"},"GetNotifications(UInt160 hash = null)")),(0,i.kt)("td",{parentName:"tr",align:null},"Gets all notifications of the execution of a contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/website/docs/n3/reference/scapi/framework/services/Runtime/Log"},"Log(string)")),(0,i.kt)("td",{parentName:"tr",align:null},"Sends a log message to the client executing the smart contract.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/website/docs/n3/reference/scapi/framework/services/Runtime/CheckWitness"},"CheckWitness()")),(0,i.kt)("td",{parentName:"tr",align:null},"Determines whether the specified account has witnessed the current transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BurnGas"),(0,i.kt)("td",{parentName:"tr",align:null},"Burning GAS to benefit the Neo ecosystem")))),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("p",null,"The Runtime class is a static class and does not require a constructor."))}m.isMDXComponent=!0}}]);